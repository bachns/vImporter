// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef KHO_ODB_HXX
#define KHO_ODB_HXX

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/oracle/qstring-traits.hxx>
#include <odb/qt/basic/oracle/qbyte-array-traits.hxx>
#include <odb/qt/basic/oracle/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/oracle/qdate-traits.hxx>
#include <odb/qt/date-time/oracle/qtime-traits.hxx>
#include <odb/qt/date-time/oracle/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Kho.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Kho
  //
  template <>
  struct class_traits< ::Kho >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Kho >
  {
    public:
    typedef ::Kho object_type;
    typedef ::std::shared_ptr< ::Kho > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::size_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/oracle/version.hxx>
#include <odb/oracle/forward.hxx>
#include <odb/oracle/binding.hxx>
#include <odb/oracle/oracle-types.hxx>
#include <odb/oracle/query.hxx>

namespace odb
{
  // Kho
  //
  template <typename A>
  struct query_columns< ::Kho, id_oracle, A >
  {
    // mKhoId
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::size_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    mKhoId_type_;

    static const mKhoId_type_ mKhoId;

    // mMaKho
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::QString,
        oracle::id_nstring >::query_type,
      oracle::id_nstring >
    mMaKho_type_;

    static const mMaKho_type_ mMaKho;

    // mTenKho
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::QString,
        oracle::id_nstring >::query_type,
      oracle::id_nstring >
    mTenKho_type_;

    static const mTenKho_type_ mTenKho;

    // mDiaDiem
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::QString,
        oracle::id_nstring >::query_type,
      oracle::id_nstring >
    mDiaDiem_type_;

    static const mDiaDiem_type_ mDiaDiem;

    // mTuLieuSo
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        bool,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    mTuLieuSo_type_;

    static const mTuLieuSo_type_ mTuLieuSo;

    // mNguoiSuaId
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::size_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    mNguoiSuaId_type_;

    static const mNguoiSuaId_type_ mNguoiSuaId;

    // mNgayChinhSua
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::QDate,
        oracle::id_date >::query_type,
      oracle::id_date >
    mNgayChinhSua_type_;

    static const mNgayChinhSua_type_ mNgayChinhSua;

    // mTrangThai
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        bool,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    mTrangThai_type_;

    static const mTrangThai_type_ mTrangThai;

    // mDuLieuDiaDanh
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::size_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    mDuLieuDiaDanh_type_;

    static const mDuLieuDiaDanh_type_ mDuLieuDiaDanh;
  };

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mKhoId_type_
  query_columns< ::Kho, id_oracle, A >::
  mKhoId (A::table_name, "\"KHOID\"", 0, 20);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mMaKho_type_
  query_columns< ::Kho, id_oracle, A >::
  mMaKho (A::table_name, "\"MAKHO\"", 0, 200);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mTenKho_type_
  query_columns< ::Kho, id_oracle, A >::
  mTenKho (A::table_name, "\"TENKHO\"", 0, 600);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mDiaDiem_type_
  query_columns< ::Kho, id_oracle, A >::
  mDiaDiem (A::table_name, "\"DIADIEM\"", 0, 1020);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mTuLieuSo_type_
  query_columns< ::Kho, id_oracle, A >::
  mTuLieuSo (A::table_name, "\"TULIEUSO\"", 0, 1);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mNguoiSuaId_type_
  query_columns< ::Kho, id_oracle, A >::
  mNguoiSuaId (A::table_name, "\"NGUOISUAID\"", 0, 20);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mNgayChinhSua_type_
  query_columns< ::Kho, id_oracle, A >::
  mNgayChinhSua (A::table_name, "\"NGAYCHINHSUA\"", 0);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mTrangThai_type_
  query_columns< ::Kho, id_oracle, A >::
  mTrangThai (A::table_name, "\"TRANGTHAI\"", 0, 1);

  template <typename A>
  const typename query_columns< ::Kho, id_oracle, A >::mDuLieuDiaDanh_type_
  query_columns< ::Kho, id_oracle, A >::
  mDuLieuDiaDanh (A::table_name, "\"DULIEUDIADANH\"", 0, 20);

  template <typename A>
  struct pointer_query_columns< ::Kho, id_oracle, A >:
    query_columns< ::Kho, id_oracle, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Kho, id_oracle >:
    public access::object_traits< ::Kho >
  {
    public:
    static const std::size_t batch = 1UL;

    struct id_image_type
    {
      char id_value[12];
      ub2 id_size;
      sb2 id_indicator;

      std::size_t version;
    };

    struct image_type
    {
      // mKhoId
      //
      char mKhoId_value[12];
      ub2 mKhoId_size;
      sb2 mKhoId_indicator;

      // mMaKho
      //
      char mMaKho_value[200];
      ub2 mMaKho_size;
      sb2 mMaKho_indicator;

      // mTenKho
      //
      char mTenKho_value[600];
      ub2 mTenKho_size;
      sb2 mTenKho_indicator;

      // mDiaDiem
      //
      char mDiaDiem_value[1020];
      ub2 mDiaDiem_size;
      sb2 mDiaDiem_indicator;

      // mTuLieuSo
      //
      unsigned int mTuLieuSo_value;
      sb2 mTuLieuSo_indicator;

      // mNguoiSuaId
      //
      char mNguoiSuaId_value[12];
      ub2 mNguoiSuaId_size;
      sb2 mNguoiSuaId_indicator;

      // mNgayChinhSua
      //
      char mNgayChinhSua_value[7];
      sb2 mNgayChinhSua_indicator;

      // mTrangThai
      //
      unsigned int mTrangThai_value;
      sb2 mTrangThai_indicator;

      // mDuLieuDiaDanh
      //
      char mDuLieuDiaDanh_value[12];
      ub2 mDuLieuDiaDanh_size;
      sb2 mDuLieuDiaDanh_indicator;

      std::size_t version;

      oracle::change_callback change_callback_;

      oracle::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static void
    bind (oracle::bind*,
          image_type&,
          oracle::statement_kind);

    static void
    bind (oracle::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          oracle::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef oracle::object_statements<object_type> statements_type;

    typedef oracle::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Kho, id_common >:
    public access::object_traits_impl< ::Kho, id_oracle >
  {
  };

  // Kho
  //
}

#include "Kho-odb.ixx"

#include <odb/post.hxx>

#endif // KHO_ODB_HXX
