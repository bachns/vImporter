// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "TuLieu-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/oracle/traits.hxx>
#include <odb/oracle/database.hxx>
#include <odb/oracle/transaction.hxx>
#include <odb/oracle/connection.hxx>
#include <odb/oracle/statement.hxx>
#include <odb/oracle/statement-cache.hxx>
#include <odb/oracle/simple-object-statements.hxx>
#include <odb/oracle/container-statements.hxx>
#include <odb/oracle/exceptions.hxx>
#include <odb/oracle/simple-object-result.hxx>

namespace odb
{
  // TuLieu
  //

  struct access::object_traits_impl< ::TuLieu, id_oracle >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      oracle::connection&,
      image_type&,
      id_image_type&,
      oracle::binding&,
      oracle::binding&)
    {
    }
  };

  access::object_traits_impl< ::TuLieu, id_oracle >::id_type
  access::object_traits_impl< ::TuLieu, id_oracle >::
  id (const id_image_type& i)
  {
    oracle::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_value (
        id,
        i.id_value,
        i.id_size,
        i.id_indicator == -1);
    }

    return id;
  }

  access::object_traits_impl< ::TuLieu, id_oracle >::id_type
  access::object_traits_impl< ::TuLieu, id_oracle >::
  id (const image_type& i)
  {
    oracle::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_value (
        id,
        i.mTuLieuId_value,
        i.mTuLieuId_size,
        i.mTuLieuId_indicator == -1);
    }

    return id;
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  bind (oracle::bind* b,
        image_type& i,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    std::size_t n (0);

    // mTuLieuId
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = oracle::bind::number;
      b[n].buffer = i.mTuLieuId_value;
      b[n].capacity = static_cast<ub4> (sizeof (i.mTuLieuId_value));
      b[n].size = &i.mTuLieuId_size;
      b[n].indicator = &i.mTuLieuId_indicator;
      n++;
    }

    // mTuLieuTypeId
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.mTuLieuTypeId_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mTuLieuTypeId_value));
    b[n].size = &i.mTuLieuTypeId_size;
    b[n].indicator = &i.mTuLieuTypeId_indicator;
    n++;

    // mMaTuLieu
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mMaTuLieu_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mMaTuLieu_value));
    b[n].size = &i.mMaTuLieu_size;
    b[n].indicator = &i.mMaTuLieu_indicator;
    n++;

    // mTenTuLieu
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mTenTuLieu_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mTenTuLieu_value));
    b[n].size = &i.mTenTuLieu_size;
    b[n].indicator = &i.mTenTuLieu_indicator;
    n++;

    // mDonGia
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mDonGia_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mDonGia_indicator;
    n++;

    // mNguoiSuaID
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.mNguoiSuaID_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mNguoiSuaID_value));
    b[n].size = &i.mNguoiSuaID_size;
    b[n].indicator = &i.mNguoiSuaID_indicator;
    n++;

    // mNgayChinhSua
    //
    b[n].type = oracle::bind::date;
    b[n].buffer = i.mNgayChinhSua_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mNgayChinhSua_value));
    b[n].size = 0;
    b[n].indicator = &i.mNgayChinhSua_indicator;
    n++;

    // mTrangThai
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.mTrangThai_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mTrangThai_indicator;
    n++;
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  bind (oracle::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = oracle::bind::number;
    b[n].buffer = i.id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.id_value));
    b[n].size = &i.id_size;
    b[n].indicator = &i.id_indicator;
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  init (image_type& i,
        const object_type& o,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // mTuLieuTypeId
    //
    {
      ::size_t const& v =
        o.mTuLieuTypeId;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_image (
        i.mTuLieuTypeId_value,
        size,
        is_null,
        v);
      i.mTuLieuTypeId_indicator = is_null ? -1 : 0;
      i.mTuLieuTypeId_size = static_cast<ub2> (size);
    }

    // mMaTuLieu
    //
    {
      ::QString const& v =
        o.mMaTuLieu;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mMaTuLieu_value,
        sizeof (i.mMaTuLieu_value),
        size,
        is_null,
        v);
      i.mMaTuLieu_indicator = is_null ? -1 : 0;
      i.mMaTuLieu_size = static_cast<ub2> (size);
    }

    // mTenTuLieu
    //
    {
      ::QString const& v =
        o.mTenTuLieu;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mTenTuLieu_value,
        sizeof (i.mTenTuLieu_value),
        size,
        is_null,
        v);
      i.mTenTuLieu_indicator = is_null ? -1 : 0;
      i.mTenTuLieu_size = static_cast<ub2> (size);
    }

    // mDonGia
    //
    {
      double const& v =
        o.mDonGia;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mDonGia_value, is_null, v);
      i.mDonGia_indicator = is_null ? -1 : 0;
    }

    // mNguoiSuaID
    //
    {
      ::size_t const& v =
        o.mNguoiSuaID;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_image (
        i.mNguoiSuaID_value,
        size,
        is_null,
        v);
      i.mNguoiSuaID_indicator = is_null ? -1 : 0;
      i.mNguoiSuaID_size = static_cast<ub2> (size);
    }

    // mNgayChinhSua
    //
    {
      ::QDate const& v =
        o.mNgayChinhSua;

      bool is_null (true);
      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_image (
        i.mNgayChinhSua_value, is_null, v);
      i.mNgayChinhSua_indicator = is_null ? -1 : 0;
    }

    // mTrangThai
    //
    {
      bool const& v =
        o.mTrangThai;

      bool is_null (false);
      oracle::value_traits<
          bool,
          oracle::id_int32 >::set_image (
        i.mTrangThai_value, is_null, v);
      i.mTrangThai_indicator = is_null ? -1 : 0;
    }
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // mTuLieuId
    //
    {
      ::size_t& v =
        o.mTuLieuId;

      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_value (
        v,
        i.mTuLieuId_value,
        i.mTuLieuId_size,
        i.mTuLieuId_indicator == -1);
    }

    // mTuLieuTypeId
    //
    {
      ::size_t& v =
        o.mTuLieuTypeId;

      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_value (
        v,
        i.mTuLieuTypeId_value,
        i.mTuLieuTypeId_size,
        i.mTuLieuTypeId_indicator == -1);
    }

    // mMaTuLieu
    //
    {
      ::QString& v =
        o.mMaTuLieu;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mMaTuLieu_value,
        i.mMaTuLieu_size,
        i.mMaTuLieu_indicator == -1);
    }

    // mTenTuLieu
    //
    {
      ::QString& v =
        o.mTenTuLieu;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mTenTuLieu_value,
        i.mTenTuLieu_size,
        i.mTenTuLieu_indicator == -1);
    }

    // mDonGia
    //
    {
      double& v =
        o.mDonGia;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mDonGia_value,
        i.mDonGia_indicator == -1);
    }

    // mNguoiSuaID
    //
    {
      ::size_t& v =
        o.mNguoiSuaID;

      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_value (
        v,
        i.mNguoiSuaID_value,
        i.mNguoiSuaID_size,
        i.mNguoiSuaID_indicator == -1);
    }

    // mNgayChinhSua
    //
    {
      ::QDate& v =
        o.mNgayChinhSua;

      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_value (
        v,
        i.mNgayChinhSua_value,
        i.mNgayChinhSua_indicator == -1);
    }

    // mTrangThai
    //
    {
      bool& v =
        o.mTrangThai;

      oracle::value_traits<
          bool,
          oracle::id_int32 >::set_value (
        v,
        i.mTrangThai_value,
        i.mTrangThai_indicator == -1);
    }
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::size_t,
          oracle::id_big_int >::set_image (
        i.id_value,
        size,
        is_null,
        id);
      i.id_indicator = is_null ? -1 : 0;
      i.id_size = static_cast<ub2> (size);
    }
  }

  const char access::object_traits_impl< ::TuLieu, id_oracle >::persist_statement[] =
  "INSERT INTO \"TULIEU\" "
  "(\"TULIEUID\", "
  "\"TULIEUTYPEID\", "
  "\"MATULIEU\", "
  "\"TENTULIEU\", "
  "\"DONGIA\", "
  "\"NGUOISUAID\", "
  "\"NGAYCHINHSUA\", "
  "\"TRANGTHAI\") "
  "VALUES "
  "(\"TULIEU_FCSEQ\".nextval, :1, :2, :3, :4, :5, :6, :7) "
  "RETURNING \"TULIEUID\" INTO :8";

  const char access::object_traits_impl< ::TuLieu, id_oracle >::find_statement[] =
  "SELECT "
  "\"TULIEU\".\"TULIEUID\", "
  "\"TULIEU\".\"TULIEUTYPEID\", "
  "\"TULIEU\".\"MATULIEU\", "
  "\"TULIEU\".\"TENTULIEU\", "
  "\"TULIEU\".\"DONGIA\", "
  "\"TULIEU\".\"NGUOISUAID\", "
  "\"TULIEU\".\"NGAYCHINHSUA\", "
  "\"TULIEU\".\"TRANGTHAI\" "
  "FROM \"TULIEU\" "
  "WHERE \"TULIEU\".\"TULIEUID\"=:1";

  const char access::object_traits_impl< ::TuLieu, id_oracle >::update_statement[] =
  "UPDATE \"TULIEU\" "
  "SET "
  "\"TULIEUTYPEID\"=:1, "
  "\"MATULIEU\"=:2, "
  "\"TENTULIEU\"=:3, "
  "\"DONGIA\"=:4, "
  "\"NGUOISUAID\"=:5, "
  "\"NGAYCHINHSUA\"=:6, "
  "\"TRANGTHAI\"=:7 "
  "WHERE \"TULIEUID\"=:8";

  const char access::object_traits_impl< ::TuLieu, id_oracle >::erase_statement[] =
  "DELETE FROM \"TULIEU\" "
  "WHERE \"TULIEUID\"=:1";

  const char access::object_traits_impl< ::TuLieu, id_oracle >::query_statement[] =
  "SELECT "
  "\"TULIEU\".\"TULIEUID\", "
  "\"TULIEU\".\"TULIEUTYPEID\", "
  "\"TULIEU\".\"MATULIEU\", "
  "\"TULIEU\".\"TENTULIEU\", "
  "\"TULIEU\".\"DONGIA\", "
  "\"TULIEU\".\"NGUOISUAID\", "
  "\"TULIEU\".\"NGAYCHINHSUA\", "
  "\"TULIEU\".\"TRANGTHAI\" "
  "FROM \"TULIEU\"";

  const char access::object_traits_impl< ::TuLieu, id_oracle >::erase_query_statement[] =
  "DELETE FROM \"TULIEU\"";

  const char access::object_traits_impl< ::TuLieu, id_oracle >::table_name[] =
  "\"TULIEU\"";

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.mTuLieuId = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace oracle;
    using oracle::update_statement;

    callback (db, obj, callback_event::pre_update);

    oracle::transaction& tr (oracle::transaction::current ());
    oracle::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.mTuLieuId);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::TuLieu, id_oracle >::
  erase (database& db, const id_type& id)
  {
    using namespace oracle;

    ODB_POTENTIALLY_UNUSED (db);

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::TuLieu, id_oracle >::pointer_type
  access::object_traits_impl< ::TuLieu, id_oracle >::
  find (database& db, const id_type& id)
  {
    using namespace oracle;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::TuLieu, id_oracle >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::TuLieu, id_oracle >::
  reload (database& db, object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.mTuLieuId);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::TuLieu, id_oracle >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace oracle;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::TuLieu, id_oracle >::object_type >
  access::object_traits_impl< ::TuLieu, id_oracle >::
  query (database&, const query_base_type& q)
  {
    using namespace oracle;
    using odb::details::shared;
    using odb::details::shared_ptr;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) oracle::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::TuLieu, id_oracle >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("BEGIN\n"
                      "  BEGIN\n"
                      "    EXECUTE IMMEDIATE 'DROP TABLE \"TULIEU\" CASCADE CONSTRAINTS';\n"
                      "  EXCEPTION\n"
                      "    WHEN OTHERS THEN\n"
                      "      IF SQLCODE != -942 THEN RAISE; END IF;\n"
                      "  END;\n"
                      "  BEGIN\n"
                      "    EXECUTE IMMEDIATE 'DROP SEQUENCE \"TULIEU_FCSEQ\"';\n"
                      "  EXCEPTION\n"
                      "    WHEN OTHERS THEN\n"
                      "      IF SQLCODE != -2289 THEN RAISE; END IF;\n"
                      "  END;\n"
                      "END;");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"TULIEU\" (\n"
                      "  \"TULIEUID\" NUMBER(20) NOT NULL PRIMARY KEY,\n"
                      "  \"TULIEUTYPEID\" NUMBER(20) NOT NULL,\n"
                      "  \"MATULIEU\" NVARCHAR2(50) NULL,\n"
                      "  \"TENTULIEU\" NVARCHAR2(150) NULL,\n"
                      "  \"DONGIA\" BINARY_DOUBLE NOT NULL,\n"
                      "  \"NGUOISUAID\" NUMBER(20) NOT NULL,\n"
                      "  \"NGAYCHINHSUA\" DATE NULL,\n"
                      "  \"TRANGTHAI\" NUMBER(1) NOT NULL)");
          db.execute ("CREATE SEQUENCE \"TULIEU_FCSEQ\"\n"
                      "  START WITH 1 INCREMENT BY 1");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_oracle,
    "",
    &create_schema);
}

#include <odb/post.hxx>
