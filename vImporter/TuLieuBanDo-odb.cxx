// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "TuLieuBanDo-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/oracle/traits.hxx>
#include <odb/oracle/database.hxx>
#include <odb/oracle/transaction.hxx>
#include <odb/oracle/connection.hxx>
#include <odb/oracle/statement.hxx>
#include <odb/oracle/statement-cache.hxx>
#include <odb/oracle/simple-object-statements.hxx>
#include <odb/oracle/container-statements.hxx>
#include <odb/oracle/exceptions.hxx>
#include <odb/oracle/simple-object-result.hxx>

namespace odb
{
  // TuLieuBanDo
  //

  struct access::object_traits_impl< ::TuLieuBanDo, id_oracle >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      oracle::connection&,
      image_type&,
      id_image_type&,
      oracle::binding&,
      oracle::binding&)
    {
    }
  };

  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::id_type
  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  id (const id_image_type& i)
  {
    oracle::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        id,
        i.id_value,
        i.id_indicator == -1);
    }

    return id;
  }

  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::id_type
  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  id (const image_type& i)
  {
    oracle::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        id,
        i.mTuLieuBanDoId_value,
        i.mTuLieuBanDoId_indicator == -1);
    }

    return id;
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  bind (oracle::bind* b,
        image_type& i,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    std::size_t n (0);

    // mTuLieuBanDoId
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = oracle::bind::integer;
      b[n].buffer = &i.mTuLieuBanDoId_value;
      b[n].capacity = 4;
      b[n].size = 0;
      b[n].indicator = &i.mTuLieuBanDoId_indicator;
      n++;
    }

    // mTuLieuId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mTuLieuId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mTuLieuId_indicator;
    n++;

    // mLoaiBanDoId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mLoaiBanDoId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mLoaiBanDoId_indicator;
    n++;

    // mTinhId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mTinhId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mTinhId_indicator;
    n++;

    // mPhienHieuManh
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mPhienHieuManh_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mPhienHieuManh_value));
    b[n].size = &i.mPhienHieuManh_size;
    b[n].indicator = &i.mPhienHieuManh_indicator;
    n++;

    // mKhuDo
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mKhuDo_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mKhuDo_value));
    b[n].size = &i.mKhuDo_size;
    b[n].indicator = &i.mKhuDo_indicator;
    n++;

    // mTenManh
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mTenManh_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mTenManh_value));
    b[n].size = &i.mTenManh_size;
    b[n].indicator = &i.mTenManh_indicator;
    n++;

    // mTyLeId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mTyLeId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mTyLeId_indicator;
    n++;

    // mHeQuyChieuId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mHeQuyChieuId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mHeQuyChieuId_indicator;
    n++;

    // mHeDoCao
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mHeDoCao_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mHeDoCao_value));
    b[n].size = &i.mHeDoCao_size;
    b[n].indicator = &i.mHeDoCao_indicator;
    n++;

    // mLuoiChieu
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mLuoiChieu_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mLuoiChieu_value));
    b[n].size = &i.mLuoiChieu_size;
    b[n].indicator = &i.mLuoiChieu_indicator;
    n++;

    // mMuiChieu
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mMuiChieu_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mMuiChieu_value));
    b[n].size = &i.mMuiChieu_size;
    b[n].indicator = &i.mMuiChieu_indicator;
    n++;

    // mKinhTuyenTruc
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mKinhTuyenTruc_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mKinhTuyenTruc_value));
    b[n].size = &i.mKinhTuyenTruc_size;
    b[n].indicator = &i.mKinhTuyenTruc_indicator;
    n++;

    // mTaiLieuGoc
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mTaiLieuGoc_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mTaiLieuGoc_value));
    b[n].size = &i.mTaiLieuGoc_size;
    b[n].indicator = &i.mTaiLieuGoc_indicator;
    n++;

    // mTaiLieuPhu
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mTaiLieuPhu_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mTaiLieuPhu_value));
    b[n].size = &i.mTaiLieuPhu_size;
    b[n].indicator = &i.mTaiLieuPhu_indicator;
    n++;

    // mKhoangCaoDeu
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mKhoangCaoDeu_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mKhoangCaoDeu_value));
    b[n].size = &i.mKhoangCaoDeu_size;
    b[n].indicator = &i.mKhoangCaoDeu_indicator;
    n++;

    // mKhoangCaoDeuDs
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mKhoangCaoDeuDs_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mKhoangCaoDeuDs_value));
    b[n].size = &i.mKhoangCaoDeuDs_size;
    b[n].indicator = &i.mKhoangCaoDeuDs_indicator;
    n++;

    // mPhuongPhapTlId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mPhuongPhapTlId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mPhuongPhapTlId_indicator;
    n++;

    // mCoQuanTlId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mCoQuanTlId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mCoQuanTlId_indicator;
    n++;

    // mThoiGianTl
    //
    b[n].type = oracle::bind::date;
    b[n].buffer = i.mThoiGianTl_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mThoiGianTl_value));
    b[n].size = 0;
    b[n].indicator = &i.mThoiGianTl_indicator;
    n++;

    // mThoiGianXb
    //
    b[n].type = oracle::bind::date;
    b[n].buffer = i.mThoiGianXb_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mThoiGianXb_value));
    b[n].size = 0;
    b[n].indicator = &i.mThoiGianXb_indicator;
    n++;

    // mCoQuanLuuGiuId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mCoQuanLuuGiuId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mCoQuanLuuGiuId_indicator;
    n++;

    // mNguonVonId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mNguonVonId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mNguonVonId_indicator;
    n++;

    // mDonGia
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mDonGia_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mDonGia_indicator;
    n++;

    // mToaDoGocKhungX1
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungX1_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungX1_indicator;
    n++;

    // mToaDoGocKhungY1
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungY1_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungY1_indicator;
    n++;

    // mToaDoGocKhungX2
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungX2_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungX2_indicator;
    n++;

    // mToaDoGocKhungY2
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungY2_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungY2_indicator;
    n++;

    // mToaDoGocKhungX3
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungX3_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungX3_indicator;
    n++;

    // mToaDoGocKhungY3
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungY3_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungY3_indicator;
    n++;

    // mToaDoGocKhungX4
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungX4_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungX4_indicator;
    n++;

    // mToaDoGocKhungY4
    //
    b[n].type = oracle::bind::binary_double;
    b[n].buffer= &i.mToaDoGocKhungY4_value;
    b[n].capacity = 8;
    b[n].size = 0;
    b[n].indicator = &i.mToaDoGocKhungY4_indicator;
    n++;

    // mDuongDanThuMuc
    //
    b[n].type = oracle::bind::nstring;
    b[n].buffer = i.mDuongDanThuMuc_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mDuongDanThuMuc_value));
    b[n].size = &i.mDuongDanThuMuc_size;
    b[n].indicator = &i.mDuongDanThuMuc_indicator;
    n++;

    // mNguoiSuaId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mNguoiSuaId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mNguoiSuaId_indicator;
    n++;

    // mNgayChinhSua
    //
    b[n].type = oracle::bind::date;
    b[n].buffer = i.mNgayChinhSua_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.mNgayChinhSua_value));
    b[n].size = 0;
    b[n].indicator = &i.mNgayChinhSua_indicator;
    n++;

    // mTrangThai
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.mTrangThai_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mTrangThai_indicator;
    n++;

    // mHuyenId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mHuyenId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mHuyenId_indicator;
    n++;

    // mDinhDangId
    //
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.mDinhDangId_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.mDinhDangId_indicator;
    n++;
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  bind (oracle::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = oracle::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.id_indicator;
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  init (image_type& i,
        const object_type& o,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // mTuLieuId
    //
    {
      int const& v =
        o.mTuLieuId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mTuLieuId_value, is_null, v);
      i.mTuLieuId_indicator = is_null ? -1 : 0;
    }

    // mLoaiBanDoId
    //
    {
      int const& v =
        o.mLoaiBanDoId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mLoaiBanDoId_value, is_null, v);
      i.mLoaiBanDoId_indicator = is_null ? -1 : 0;
    }

    // mTinhId
    //
    {
      int const& v =
        o.mTinhId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mTinhId_value, is_null, v);
      i.mTinhId_indicator = is_null ? -1 : 0;
    }

    // mPhienHieuManh
    //
    {
      ::QString const& v =
        o.mPhienHieuManh;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mPhienHieuManh_value,
        sizeof (i.mPhienHieuManh_value),
        size,
        is_null,
        v);
      i.mPhienHieuManh_indicator = is_null ? -1 : 0;
      i.mPhienHieuManh_size = static_cast<ub2> (size);
    }

    // mKhuDo
    //
    {
      ::QString const& v =
        o.mKhuDo;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mKhuDo_value,
        sizeof (i.mKhuDo_value),
        size,
        is_null,
        v);
      i.mKhuDo_indicator = is_null ? -1 : 0;
      i.mKhuDo_size = static_cast<ub2> (size);
    }

    // mTenManh
    //
    {
      ::QString const& v =
        o.mTenManh;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mTenManh_value,
        sizeof (i.mTenManh_value),
        size,
        is_null,
        v);
      i.mTenManh_indicator = is_null ? -1 : 0;
      i.mTenManh_size = static_cast<ub2> (size);
    }

    // mTyLeId
    //
    {
      int const& v =
        o.mTyLeId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mTyLeId_value, is_null, v);
      i.mTyLeId_indicator = is_null ? -1 : 0;
    }

    // mHeQuyChieuId
    //
    {
      int const& v =
        o.mHeQuyChieuId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mHeQuyChieuId_value, is_null, v);
      i.mHeQuyChieuId_indicator = is_null ? -1 : 0;
    }

    // mHeDoCao
    //
    {
      ::QString const& v =
        o.mHeDoCao;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mHeDoCao_value,
        sizeof (i.mHeDoCao_value),
        size,
        is_null,
        v);
      i.mHeDoCao_indicator = is_null ? -1 : 0;
      i.mHeDoCao_size = static_cast<ub2> (size);
    }

    // mLuoiChieu
    //
    {
      ::QString const& v =
        o.mLuoiChieu;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mLuoiChieu_value,
        sizeof (i.mLuoiChieu_value),
        size,
        is_null,
        v);
      i.mLuoiChieu_indicator = is_null ? -1 : 0;
      i.mLuoiChieu_size = static_cast<ub2> (size);
    }

    // mMuiChieu
    //
    {
      ::QString const& v =
        o.mMuiChieu;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mMuiChieu_value,
        sizeof (i.mMuiChieu_value),
        size,
        is_null,
        v);
      i.mMuiChieu_indicator = is_null ? -1 : 0;
      i.mMuiChieu_size = static_cast<ub2> (size);
    }

    // mKinhTuyenTruc
    //
    {
      ::QString const& v =
        o.mKinhTuyenTruc;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mKinhTuyenTruc_value,
        sizeof (i.mKinhTuyenTruc_value),
        size,
        is_null,
        v);
      i.mKinhTuyenTruc_indicator = is_null ? -1 : 0;
      i.mKinhTuyenTruc_size = static_cast<ub2> (size);
    }

    // mTaiLieuGoc
    //
    {
      ::QString const& v =
        o.mTaiLieuGoc;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mTaiLieuGoc_value,
        sizeof (i.mTaiLieuGoc_value),
        size,
        is_null,
        v);
      i.mTaiLieuGoc_indicator = is_null ? -1 : 0;
      i.mTaiLieuGoc_size = static_cast<ub2> (size);
    }

    // mTaiLieuPhu
    //
    {
      ::QString const& v =
        o.mTaiLieuPhu;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mTaiLieuPhu_value,
        sizeof (i.mTaiLieuPhu_value),
        size,
        is_null,
        v);
      i.mTaiLieuPhu_indicator = is_null ? -1 : 0;
      i.mTaiLieuPhu_size = static_cast<ub2> (size);
    }

    // mKhoangCaoDeu
    //
    {
      ::QString const& v =
        o.mKhoangCaoDeu;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mKhoangCaoDeu_value,
        sizeof (i.mKhoangCaoDeu_value),
        size,
        is_null,
        v);
      i.mKhoangCaoDeu_indicator = is_null ? -1 : 0;
      i.mKhoangCaoDeu_size = static_cast<ub2> (size);
    }

    // mKhoangCaoDeuDs
    //
    {
      ::QString const& v =
        o.mKhoangCaoDeuDs;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mKhoangCaoDeuDs_value,
        sizeof (i.mKhoangCaoDeuDs_value),
        size,
        is_null,
        v);
      i.mKhoangCaoDeuDs_indicator = is_null ? -1 : 0;
      i.mKhoangCaoDeuDs_size = static_cast<ub2> (size);
    }

    // mPhuongPhapTlId
    //
    {
      int const& v =
        o.mPhuongPhapTlId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mPhuongPhapTlId_value, is_null, v);
      i.mPhuongPhapTlId_indicator = is_null ? -1 : 0;
    }

    // mCoQuanTlId
    //
    {
      int const& v =
        o.mCoQuanTlId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mCoQuanTlId_value, is_null, v);
      i.mCoQuanTlId_indicator = is_null ? -1 : 0;
    }

    // mThoiGianTl
    //
    {
      ::QDate const& v =
        o.mThoiGianTl;

      bool is_null (true);
      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_image (
        i.mThoiGianTl_value, is_null, v);
      i.mThoiGianTl_indicator = is_null ? -1 : 0;
    }

    // mThoiGianXb
    //
    {
      ::QDate const& v =
        o.mThoiGianXb;

      bool is_null (true);
      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_image (
        i.mThoiGianXb_value, is_null, v);
      i.mThoiGianXb_indicator = is_null ? -1 : 0;
    }

    // mCoQuanLuuGiuId
    //
    {
      int const& v =
        o.mCoQuanLuuGiuId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mCoQuanLuuGiuId_value, is_null, v);
      i.mCoQuanLuuGiuId_indicator = is_null ? -1 : 0;
    }

    // mNguonVonId
    //
    {
      int const& v =
        o.mNguonVonId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mNguonVonId_value, is_null, v);
      i.mNguonVonId_indicator = is_null ? -1 : 0;
    }

    // mDonGia
    //
    {
      double const& v =
        o.mDonGia;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mDonGia_value, is_null, v);
      i.mDonGia_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungX1
    //
    {
      double const& v =
        o.mToaDoGocKhungX1;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungX1_value, is_null, v);
      i.mToaDoGocKhungX1_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungY1
    //
    {
      double const& v =
        o.mToaDoGocKhungY1;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungY1_value, is_null, v);
      i.mToaDoGocKhungY1_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungX2
    //
    {
      double const& v =
        o.mToaDoGocKhungX2;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungX2_value, is_null, v);
      i.mToaDoGocKhungX2_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungY2
    //
    {
      double const& v =
        o.mToaDoGocKhungY2;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungY2_value, is_null, v);
      i.mToaDoGocKhungY2_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungX3
    //
    {
      double const& v =
        o.mToaDoGocKhungX3;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungX3_value, is_null, v);
      i.mToaDoGocKhungX3_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungY3
    //
    {
      double const& v =
        o.mToaDoGocKhungY3;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungY3_value, is_null, v);
      i.mToaDoGocKhungY3_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungX4
    //
    {
      double const& v =
        o.mToaDoGocKhungX4;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungX4_value, is_null, v);
      i.mToaDoGocKhungX4_indicator = is_null ? -1 : 0;
    }

    // mToaDoGocKhungY4
    //
    {
      double const& v =
        o.mToaDoGocKhungY4;

      bool is_null (false);
      oracle::value_traits<
          double,
          oracle::id_double >::set_image (
        i.mToaDoGocKhungY4_value, is_null, v);
      i.mToaDoGocKhungY4_indicator = is_null ? -1 : 0;
    }

    // mDuongDanThuMuc
    //
    {
      ::QString const& v =
        o.mDuongDanThuMuc;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_image (
        i.mDuongDanThuMuc_value,
        sizeof (i.mDuongDanThuMuc_value),
        size,
        is_null,
        v);
      i.mDuongDanThuMuc_indicator = is_null ? -1 : 0;
      i.mDuongDanThuMuc_size = static_cast<ub2> (size);
    }

    // mNguoiSuaId
    //
    {
      int const& v =
        o.mNguoiSuaId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mNguoiSuaId_value, is_null, v);
      i.mNguoiSuaId_indicator = is_null ? -1 : 0;
    }

    // mNgayChinhSua
    //
    {
      ::QDate const& v =
        o.mNgayChinhSua;

      bool is_null (true);
      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_image (
        i.mNgayChinhSua_value, is_null, v);
      i.mNgayChinhSua_indicator = is_null ? -1 : 0;
    }

    // mTrangThai
    //
    {
      bool const& v =
        o.mTrangThai;

      bool is_null (false);
      oracle::value_traits<
          bool,
          oracle::id_int32 >::set_image (
        i.mTrangThai_value, is_null, v);
      i.mTrangThai_indicator = is_null ? -1 : 0;
    }

    // mHuyenId
    //
    {
      int const& v =
        o.mHuyenId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mHuyenId_value, is_null, v);
      i.mHuyenId_indicator = is_null ? -1 : 0;
    }

    // mDinhDangId
    //
    {
      int const& v =
        o.mDinhDangId;

      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.mDinhDangId_value, is_null, v);
      i.mDinhDangId_indicator = is_null ? -1 : 0;
    }
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // mTuLieuBanDoId
    //
    {
      int& v =
        o.mTuLieuBanDoId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mTuLieuBanDoId_value,
        i.mTuLieuBanDoId_indicator == -1);
    }

    // mTuLieuId
    //
    {
      int& v =
        o.mTuLieuId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mTuLieuId_value,
        i.mTuLieuId_indicator == -1);
    }

    // mLoaiBanDoId
    //
    {
      int& v =
        o.mLoaiBanDoId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mLoaiBanDoId_value,
        i.mLoaiBanDoId_indicator == -1);
    }

    // mTinhId
    //
    {
      int& v =
        o.mTinhId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mTinhId_value,
        i.mTinhId_indicator == -1);
    }

    // mPhienHieuManh
    //
    {
      ::QString& v =
        o.mPhienHieuManh;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mPhienHieuManh_value,
        i.mPhienHieuManh_size,
        i.mPhienHieuManh_indicator == -1);
    }

    // mKhuDo
    //
    {
      ::QString& v =
        o.mKhuDo;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mKhuDo_value,
        i.mKhuDo_size,
        i.mKhuDo_indicator == -1);
    }

    // mTenManh
    //
    {
      ::QString& v =
        o.mTenManh;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mTenManh_value,
        i.mTenManh_size,
        i.mTenManh_indicator == -1);
    }

    // mTyLeId
    //
    {
      int& v =
        o.mTyLeId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mTyLeId_value,
        i.mTyLeId_indicator == -1);
    }

    // mHeQuyChieuId
    //
    {
      int& v =
        o.mHeQuyChieuId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mHeQuyChieuId_value,
        i.mHeQuyChieuId_indicator == -1);
    }

    // mHeDoCao
    //
    {
      ::QString& v =
        o.mHeDoCao;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mHeDoCao_value,
        i.mHeDoCao_size,
        i.mHeDoCao_indicator == -1);
    }

    // mLuoiChieu
    //
    {
      ::QString& v =
        o.mLuoiChieu;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mLuoiChieu_value,
        i.mLuoiChieu_size,
        i.mLuoiChieu_indicator == -1);
    }

    // mMuiChieu
    //
    {
      ::QString& v =
        o.mMuiChieu;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mMuiChieu_value,
        i.mMuiChieu_size,
        i.mMuiChieu_indicator == -1);
    }

    // mKinhTuyenTruc
    //
    {
      ::QString& v =
        o.mKinhTuyenTruc;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mKinhTuyenTruc_value,
        i.mKinhTuyenTruc_size,
        i.mKinhTuyenTruc_indicator == -1);
    }

    // mTaiLieuGoc
    //
    {
      ::QString& v =
        o.mTaiLieuGoc;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mTaiLieuGoc_value,
        i.mTaiLieuGoc_size,
        i.mTaiLieuGoc_indicator == -1);
    }

    // mTaiLieuPhu
    //
    {
      ::QString& v =
        o.mTaiLieuPhu;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mTaiLieuPhu_value,
        i.mTaiLieuPhu_size,
        i.mTaiLieuPhu_indicator == -1);
    }

    // mKhoangCaoDeu
    //
    {
      ::QString& v =
        o.mKhoangCaoDeu;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mKhoangCaoDeu_value,
        i.mKhoangCaoDeu_size,
        i.mKhoangCaoDeu_indicator == -1);
    }

    // mKhoangCaoDeuDs
    //
    {
      ::QString& v =
        o.mKhoangCaoDeuDs;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mKhoangCaoDeuDs_value,
        i.mKhoangCaoDeuDs_size,
        i.mKhoangCaoDeuDs_indicator == -1);
    }

    // mPhuongPhapTlId
    //
    {
      int& v =
        o.mPhuongPhapTlId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mPhuongPhapTlId_value,
        i.mPhuongPhapTlId_indicator == -1);
    }

    // mCoQuanTlId
    //
    {
      int& v =
        o.mCoQuanTlId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mCoQuanTlId_value,
        i.mCoQuanTlId_indicator == -1);
    }

    // mThoiGianTl
    //
    {
      ::QDate& v =
        o.mThoiGianTl;

      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_value (
        v,
        i.mThoiGianTl_value,
        i.mThoiGianTl_indicator == -1);
    }

    // mThoiGianXb
    //
    {
      ::QDate& v =
        o.mThoiGianXb;

      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_value (
        v,
        i.mThoiGianXb_value,
        i.mThoiGianXb_indicator == -1);
    }

    // mCoQuanLuuGiuId
    //
    {
      int& v =
        o.mCoQuanLuuGiuId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mCoQuanLuuGiuId_value,
        i.mCoQuanLuuGiuId_indicator == -1);
    }

    // mNguonVonId
    //
    {
      int& v =
        o.mNguonVonId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mNguonVonId_value,
        i.mNguonVonId_indicator == -1);
    }

    // mDonGia
    //
    {
      double& v =
        o.mDonGia;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mDonGia_value,
        i.mDonGia_indicator == -1);
    }

    // mToaDoGocKhungX1
    //
    {
      double& v =
        o.mToaDoGocKhungX1;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungX1_value,
        i.mToaDoGocKhungX1_indicator == -1);
    }

    // mToaDoGocKhungY1
    //
    {
      double& v =
        o.mToaDoGocKhungY1;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungY1_value,
        i.mToaDoGocKhungY1_indicator == -1);
    }

    // mToaDoGocKhungX2
    //
    {
      double& v =
        o.mToaDoGocKhungX2;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungX2_value,
        i.mToaDoGocKhungX2_indicator == -1);
    }

    // mToaDoGocKhungY2
    //
    {
      double& v =
        o.mToaDoGocKhungY2;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungY2_value,
        i.mToaDoGocKhungY2_indicator == -1);
    }

    // mToaDoGocKhungX3
    //
    {
      double& v =
        o.mToaDoGocKhungX3;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungX3_value,
        i.mToaDoGocKhungX3_indicator == -1);
    }

    // mToaDoGocKhungY3
    //
    {
      double& v =
        o.mToaDoGocKhungY3;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungY3_value,
        i.mToaDoGocKhungY3_indicator == -1);
    }

    // mToaDoGocKhungX4
    //
    {
      double& v =
        o.mToaDoGocKhungX4;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungX4_value,
        i.mToaDoGocKhungX4_indicator == -1);
    }

    // mToaDoGocKhungY4
    //
    {
      double& v =
        o.mToaDoGocKhungY4;

      oracle::value_traits<
          double,
          oracle::id_double >::set_value (
        v,
        i.mToaDoGocKhungY4_value,
        i.mToaDoGocKhungY4_indicator == -1);
    }

    // mDuongDanThuMuc
    //
    {
      ::QString& v =
        o.mDuongDanThuMuc;

      oracle::value_traits<
          ::QString,
          oracle::id_nstring >::set_value (
        v,
        i.mDuongDanThuMuc_value,
        i.mDuongDanThuMuc_size,
        i.mDuongDanThuMuc_indicator == -1);
    }

    // mNguoiSuaId
    //
    {
      int& v =
        o.mNguoiSuaId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mNguoiSuaId_value,
        i.mNguoiSuaId_indicator == -1);
    }

    // mNgayChinhSua
    //
    {
      ::QDate& v =
        o.mNgayChinhSua;

      oracle::value_traits<
          ::QDate,
          oracle::id_date >::set_value (
        v,
        i.mNgayChinhSua_value,
        i.mNgayChinhSua_indicator == -1);
    }

    // mTrangThai
    //
    {
      bool& v =
        o.mTrangThai;

      oracle::value_traits<
          bool,
          oracle::id_int32 >::set_value (
        v,
        i.mTrangThai_value,
        i.mTrangThai_indicator == -1);
    }

    // mHuyenId
    //
    {
      int& v =
        o.mHuyenId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mHuyenId_value,
        i.mHuyenId_indicator == -1);
    }

    // mDinhDangId
    //
    {
      int& v =
        o.mDinhDangId;

      oracle::value_traits<
          int,
          oracle::id_int32 >::set_value (
        v,
        i.mDinhDangId_value,
        i.mDinhDangId_indicator == -1);
    }
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      oracle::value_traits<
          int,
          oracle::id_int32 >::set_image (
        i.id_value, is_null, id);
      i.id_indicator = is_null ? -1 : 0;
    }
  }

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::persist_statement[] =
  "INSERT INTO \"TULIEUBANDO\" "
  "(\"TULIEUBANDOID\", "
  "\"TULIEUID\", "
  "\"LOAIBANDOID\", "
  "\"TINHID\", "
  "\"PHIENHIEUMANH\", "
  "\"KHUDO\", "
  "\"TENMANH\", "
  "\"TYLEID\", "
  "\"HEQUYCHIEUID\", "
  "\"HEDOCAO\", "
  "\"LUOICHIEU\", "
  "\"MUICHIEU\", "
  "\"KINHTUYENTRUC\", "
  "\"TAILIEUGOC\", "
  "\"TAILIEUPHU\", "
  "\"KHOANGCAODEU\", "
  "\"KHOANGCAODEUDS\", "
  "\"PHUONGPHAPTLID\", "
  "\"COQUANTLID\", "
  "\"THOIGIANTL\", "
  "\"THOIGIANXB\", "
  "\"COQUANLUUGIUID\", "
  "\"NGUONVONID\", "
  "\"DONGIA\", "
  "\"TOADOGOCKHUNGX1\", "
  "\"TOADOGOCKHUNGY1\", "
  "\"TOADOGOCKHUNGX2\", "
  "\"TOADOGOCKHUNGY2\", "
  "\"TOADOGOCKHUNGX3\", "
  "\"TOADOGOCKHUNGY3\", "
  "\"TOADOGOCKHUNGX4\", "
  "\"TOADOGOCKHUNGY4\", "
  "\"DUONGDANTHUMUC\", "
  "\"NGUOISUAID\", "
  "\"NGAYCHINHSUA\", "
  "\"TRANGTHAI\", "
  "\"HUYENID\", "
  "\"DINHDANGID\") "
  "VALUES "
  "(\"TULIEUBANDO_seq\".nextval, :1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27, :28, :29, :30, :31, :32, :33, :34, :35, :36, :37) "
  "RETURNING \"TULIEUBANDOID\" INTO :38";

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::find_statement[] =
  "SELECT "
  "\"TULIEUBANDO\".\"TULIEUBANDOID\", "
  "\"TULIEUBANDO\".\"TULIEUID\", "
  "\"TULIEUBANDO\".\"LOAIBANDOID\", "
  "\"TULIEUBANDO\".\"TINHID\", "
  "\"TULIEUBANDO\".\"PHIENHIEUMANH\", "
  "\"TULIEUBANDO\".\"KHUDO\", "
  "\"TULIEUBANDO\".\"TENMANH\", "
  "\"TULIEUBANDO\".\"TYLEID\", "
  "\"TULIEUBANDO\".\"HEQUYCHIEUID\", "
  "\"TULIEUBANDO\".\"HEDOCAO\", "
  "\"TULIEUBANDO\".\"LUOICHIEU\", "
  "\"TULIEUBANDO\".\"MUICHIEU\", "
  "\"TULIEUBANDO\".\"KINHTUYENTRUC\", "
  "\"TULIEUBANDO\".\"TAILIEUGOC\", "
  "\"TULIEUBANDO\".\"TAILIEUPHU\", "
  "\"TULIEUBANDO\".\"KHOANGCAODEU\", "
  "\"TULIEUBANDO\".\"KHOANGCAODEUDS\", "
  "\"TULIEUBANDO\".\"PHUONGPHAPTLID\", "
  "\"TULIEUBANDO\".\"COQUANTLID\", "
  "\"TULIEUBANDO\".\"THOIGIANTL\", "
  "\"TULIEUBANDO\".\"THOIGIANXB\", "
  "\"TULIEUBANDO\".\"COQUANLUUGIUID\", "
  "\"TULIEUBANDO\".\"NGUONVONID\", "
  "\"TULIEUBANDO\".\"DONGIA\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX1\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY1\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX2\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY2\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX3\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY3\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX4\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY4\", "
  "\"TULIEUBANDO\".\"DUONGDANTHUMUC\", "
  "\"TULIEUBANDO\".\"NGUOISUAID\", "
  "\"TULIEUBANDO\".\"NGAYCHINHSUA\", "
  "\"TULIEUBANDO\".\"TRANGTHAI\", "
  "\"TULIEUBANDO\".\"HUYENID\", "
  "\"TULIEUBANDO\".\"DINHDANGID\" "
  "FROM \"TULIEUBANDO\" "
  "WHERE \"TULIEUBANDO\".\"TULIEUBANDOID\"=:1";

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::update_statement[] =
  "UPDATE \"TULIEUBANDO\" "
  "SET "
  "\"TULIEUID\"=:1, "
  "\"LOAIBANDOID\"=:2, "
  "\"TINHID\"=:3, "
  "\"PHIENHIEUMANH\"=:4, "
  "\"KHUDO\"=:5, "
  "\"TENMANH\"=:6, "
  "\"TYLEID\"=:7, "
  "\"HEQUYCHIEUID\"=:8, "
  "\"HEDOCAO\"=:9, "
  "\"LUOICHIEU\"=:10, "
  "\"MUICHIEU\"=:11, "
  "\"KINHTUYENTRUC\"=:12, "
  "\"TAILIEUGOC\"=:13, "
  "\"TAILIEUPHU\"=:14, "
  "\"KHOANGCAODEU\"=:15, "
  "\"KHOANGCAODEUDS\"=:16, "
  "\"PHUONGPHAPTLID\"=:17, "
  "\"COQUANTLID\"=:18, "
  "\"THOIGIANTL\"=:19, "
  "\"THOIGIANXB\"=:20, "
  "\"COQUANLUUGIUID\"=:21, "
  "\"NGUONVONID\"=:22, "
  "\"DONGIA\"=:23, "
  "\"TOADOGOCKHUNGX1\"=:24, "
  "\"TOADOGOCKHUNGY1\"=:25, "
  "\"TOADOGOCKHUNGX2\"=:26, "
  "\"TOADOGOCKHUNGY2\"=:27, "
  "\"TOADOGOCKHUNGX3\"=:28, "
  "\"TOADOGOCKHUNGY3\"=:29, "
  "\"TOADOGOCKHUNGX4\"=:30, "
  "\"TOADOGOCKHUNGY4\"=:31, "
  "\"DUONGDANTHUMUC\"=:32, "
  "\"NGUOISUAID\"=:33, "
  "\"NGAYCHINHSUA\"=:34, "
  "\"TRANGTHAI\"=:35, "
  "\"HUYENID\"=:36, "
  "\"DINHDANGID\"=:37 "
  "WHERE \"TULIEUBANDOID\"=:38";

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::erase_statement[] =
  "DELETE FROM \"TULIEUBANDO\" "
  "WHERE \"TULIEUBANDOID\"=:1";

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::query_statement[] =
  "SELECT "
  "\"TULIEUBANDO\".\"TULIEUBANDOID\", "
  "\"TULIEUBANDO\".\"TULIEUID\", "
  "\"TULIEUBANDO\".\"LOAIBANDOID\", "
  "\"TULIEUBANDO\".\"TINHID\", "
  "\"TULIEUBANDO\".\"PHIENHIEUMANH\", "
  "\"TULIEUBANDO\".\"KHUDO\", "
  "\"TULIEUBANDO\".\"TENMANH\", "
  "\"TULIEUBANDO\".\"TYLEID\", "
  "\"TULIEUBANDO\".\"HEQUYCHIEUID\", "
  "\"TULIEUBANDO\".\"HEDOCAO\", "
  "\"TULIEUBANDO\".\"LUOICHIEU\", "
  "\"TULIEUBANDO\".\"MUICHIEU\", "
  "\"TULIEUBANDO\".\"KINHTUYENTRUC\", "
  "\"TULIEUBANDO\".\"TAILIEUGOC\", "
  "\"TULIEUBANDO\".\"TAILIEUPHU\", "
  "\"TULIEUBANDO\".\"KHOANGCAODEU\", "
  "\"TULIEUBANDO\".\"KHOANGCAODEUDS\", "
  "\"TULIEUBANDO\".\"PHUONGPHAPTLID\", "
  "\"TULIEUBANDO\".\"COQUANTLID\", "
  "\"TULIEUBANDO\".\"THOIGIANTL\", "
  "\"TULIEUBANDO\".\"THOIGIANXB\", "
  "\"TULIEUBANDO\".\"COQUANLUUGIUID\", "
  "\"TULIEUBANDO\".\"NGUONVONID\", "
  "\"TULIEUBANDO\".\"DONGIA\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX1\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY1\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX2\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY2\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX3\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY3\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGX4\", "
  "\"TULIEUBANDO\".\"TOADOGOCKHUNGY4\", "
  "\"TULIEUBANDO\".\"DUONGDANTHUMUC\", "
  "\"TULIEUBANDO\".\"NGUOISUAID\", "
  "\"TULIEUBANDO\".\"NGAYCHINHSUA\", "
  "\"TULIEUBANDO\".\"TRANGTHAI\", "
  "\"TULIEUBANDO\".\"HUYENID\", "
  "\"TULIEUBANDO\".\"DINHDANGID\" "
  "FROM \"TULIEUBANDO\"";

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::erase_query_statement[] =
  "DELETE FROM \"TULIEUBANDO\"";

  const char access::object_traits_impl< ::TuLieuBanDo, id_oracle >::table_name[] =
  "\"TULIEUBANDO\"";

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.mTuLieuBanDoId = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace oracle;
    using oracle::update_statement;

    callback (db, obj, callback_event::pre_update);

    oracle::transaction& tr (oracle::transaction::current ());
    oracle::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.mTuLieuBanDoId);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    init (im, obj, statement_update);

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  erase (database& db, const id_type& id)
  {
    using namespace oracle;

    ODB_POTENTIALLY_UNUSED (db);

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::pointer_type
  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  find (database& db, const id_type& id)
  {
    using namespace oracle;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      st.stream_result ();
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  reload (database& db, object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.mTuLieuBanDoId);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    st.stream_result ();
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace oracle;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::TuLieuBanDo, id_oracle >::object_type >
  access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  query (database&, const query_base_type& q)
  {
    using namespace oracle;
    using odb::details::shared;
    using odb::details::shared_ptr;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) oracle::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::TuLieuBanDo, id_oracle >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
